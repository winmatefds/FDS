/****************************************************************************/
/* COPYRIGHT (C) STMicroelectronics 2011.                                   */
/*                                                                          */
/* All rights reserved. This document contains proprietary and              */
/* confidential information of the STMicroelectronics Group. This           */
/* document is not to be copied in whole or part. STMicroelectronics        */
/* assumes no responsibility for the consequences of use of such            */
/* information nor for any infringement of patents or other rights of       */
/* third parties which may result from its use. No license is granted by    */
/* implication or otherwise under any patent or patent rights of            */
/* STMicroelectronics.                                                      */
/* STMicroelectronics                                                       */
/* products are not authorized for use as critical components in life       */
/* support devices or systems without express written approval of           */
/* STMicroelectronics.                                                      */
/*==========================================================*/
/*                                                                          */
/* MODULE:      app_mfm.cfg                                                 */
/*                                                                          */
/* USAGE:       This module is linker LOCATE file for ROM code              */
/*                                                                          */
/*             Extended mode, with a minimum 1M maximum code space of 8M    */
/*                                                                          */
/*              The address space is as follows:                            */
/*                  F00000 - FFFFFF, exclude from 1M reserved for IROM      */
/*                  C00000 - EFFFFF, Unused 3M                              */
/*                  410000 - BFFFFF, 8M application space                   */
/*                  400000 - 410000, 64K reserved data space                */
/*                                                                          */
/*                  +----------+ BFFFFF (top of 8M flash)                   */
/*                  |          |                                            */
/*                  | 8M flash |                                            */
/*                  |          |                                            */
/*                  +----------+ 7FFFFF (top of 4M flash)                   */
/*                  |          |                                            */
/*                  | 4M flash |                                            */
/*                  |          |                                            */
/*                  +----------+ 5FFFFF (top of 2M flash)                   */
/*                  |          |                                            */
/*                  | 2M flash |                                            */
/*                  |          |                                            */
/*                  +----------+ 4FFFFF (top of 1M flash)                   */
/*                  |          |                                            */
/*                  | 1M flash |                                            */
/*                  |          |                                            */
/*                  +----------+ 410000 (bottom of 2M 4M 8M flash)          */
/*                                                                          */

/****************************************************************************/

cputype     Turbo186          // Select the target system processor

//******************************************************************************
//  I N C L U D E    F I L E S
//******************************************************************************
//
// used for system specific configuration (Board name, XROM size)
//
#include "system\system.h"          // System configration

#message  Building for Athena

#ifdef __ADDR24__
    #message  Extended 24-bit address mode
    #ifdef ROM_SIZE_512K
        #message 512K flash
    #endif
    #ifdef ROM_SIZE_1MB
        #message 1MB flash
    #endif
    #ifdef ROM_SIZE_2MB
        #message 2MB flash
    #endif
    #ifdef ROM_SIZE_4MB
        #message 4MB flash
    #endif
    #ifdef ROM_SIZE_8MB
        #message 8MB flash
    #endif
#else
    #message  Not support Real 20-bit address mode
#endif

//******************************************************************************
//  D E B U G   F I L E S
//******************************************************************************

absfile     axe86                   // Paradigm C++ debugging output
listfile    segments            \   // Absolute segment map
            publics by address  \
            symbols             \
            lines               \
            regions

//******************************************************************************
//  O U T P U T    H E X    F I L E
//******************************************************************************
#ifdef __ADDR24__
  #if defined(EV3_93xx_BOARD)
  #message  Build for STDP93xx EV1 board
         hexfile intel386 filename = ./object_ext/AthenaEv3_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaEv3_RC0.bin
  #elif defined(EV1_93xx_BOARD)
  #message  Build for STDP93xx EV1 board
         hexfile intel386 filename = ./object_ext/AthenaEv1_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaEv1_RC0.bin
  #elif defined(EV2_93xx_BOARD)
  #message  Build for STDP93xx EV2 board
         hexfile intel386 filename = ./object_ext/AthenaEv2_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaEv2_RC0.bin
  #endif

  #if defined(RD3_93xx_BOARD)
  #message  Build for STDP93xx RD3 board
         hexfile intel386 filename = d:/bios/AthenaRd3_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaRd3_RC0.bin
  #elif defined(ST_4K2K_93xx_BOARD)
  #message  Build for STDP93xx 4Kx2K board
         hexfile intel386 filename = ./object_ext/Athena_4Kx2K_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/Athena_4Kx2K_RC0.bin
  #elif defined(RD2_93xx_BOARD)
  #message  Build for STDP93xx RD2 board
         hexfile intel386 filename = ./object_ext/AthenaRd2_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaRd2_RC0.bin
  #elif defined(RD1_93xx_BOARD)
  #message  Build for STDP93xx RD1 board
         hexfile intel386 filename = d:/bios/AthenaRd3_RC0.hex
         hexfile binary offset = 0x400000 size = CFG_FILE_BINARY_SIZE filename = ./object_ext/AthenaRd1_RC0.bin
  #endif
#endif

warnings    -w1002        // Disable the "Assume absoulte" warning
warnings    -w1033        // Disable the "Class 'IROM_CODE' not named in an OUTPUT directive" warning

//******************************************************************************
//  S R A M    M E M O R Y    M A P
//******************************************************************************
//
// Define how the target system address space is partitioned.  Paradigm LOCATE will check that this
// mapping is followed.
//

    map 0x0000 to 0x7FFF as iram
    map 0x8000 to CFG_FILE_RESERVED_END as reserved

       
#ifdef CFG_FILE_CODE_MAP_DECR
    map DATA_DRAM_ADDR to CFG_FILE_CODE_MAP_DECR as rdwr //dram data segment   
#endif

#ifdef __ADDR24__ 
    map CODE_START_ADDRESS to CODE_END_ADDRESS as rdonly //xrom code 24bit (up to 8M)
    map 0xC00000 to 0xEFFFFF as reserved //not used
    map 0xF00000 to 0xFFFFFF as rdonly //irom
#endif

//******************************************************************************
//  D A T A     C L A S S  &  O R D E R
//******************************************************************************
dup DATA ROMDATA                    // Make a copy of initialized data
class IROM_DATA = 0x0000            // RAM data space

order IROM_DATA OSD_CMDBUF DATA BSS NVRAM STACK

#ifdef CFG_FILE_DATA_CLASS
    class FAR_BSS = CFG_FILE_DATA_CLASS //DRAM data class
#endif

class CODE = CFG_FILE_CODE_CLASS

order CODE ROMDATA ENDROMDATA FAR_CONST

#ifdef __ADDR24__
    class END_SEG = CFG_FILE_CODE_END_CLASS     // XROM code end
#endif

class IROM_CODE = 0xF000  // IROM code

output CODE ROMDATA ENDROMDATA FAR_CONST END_SEG

/***********************************  END  ************************************/
