Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 1
LOWPOW~1\LPM_C0~1.ASM



      1				     ;/*
      2				     ;	     $Workfile:	  C0startup.asm	 $
      3				     ;	     $Revision:	1.11 $
      4				     ;	     $Date: 2011/12/15 01:43:01	$
      5				     ;*/
      6				     ;//******************************************************************************
      7				     ;// COPYRIGHT (C) STMicroelectronics 2011.
      8				     ;//
      9				     ;// All rights reserved. This document contains proprietary and
     10				     ;// confidential information of the STMicroelectronics Group. This
     11				     ;// document is not to be copied in whole or part.	STMicroelectronics
     12				     ;// assumes no responsibility for the consequences	of use of such
     13				     ;// information nor for any infringement of patents or other rights of
     14				     ;// third parties which may result	from its use. No license is granted by
     15				     ;// implication or	otherwise under	any patent or patent rights of
     16				     ;// STMicroelectronics.
     17				     ;// STMicroelectronics
     18				     ;// products are not authorized for use as	critical components in life
     19				     ;// support devices or systems without express written approval of
     20				     ;// STMicroelectronics.
     21				     ;//==============================================================================
     22				     ;//
     23				     ;// MODULE:      C0Startup.asm
     24				     ;//
     25				     ;// USAGE:	      This module contains system data initialization
     26				     ;//
     27				     ;//******************************************************************************
     28				     .186						     ; Required	for target independence
     29
     30				     ;//******************************************************************************
     31				     ;//  C H I	P - S P	E C I F	I C	D E F I	N I T I	O N S
     32				     ;//******************************************************************************
     33				     ;Sequoia specific
     34	      =FA00		     PCB_BASE		     EQU     0FA00h
     35	      =FF00		     PCB_BASE_DEF	     EQU     0FF00h
     36	      =FE38		     PCB_UMCS_0_WAIT_STATES  EQU     0FE38h		     ;0	wait states number for upper memory +
     37				     block 0xFE000
     38
     39	      =0000		     INTERRUPT_VECTOR_START  EQU     0h
     40	      =0060		     INTERRUPT_VECTOR_END    EQU     60h
     41
     42	      =0800		     STACK_SIZE	EQU 2048 ; 2K stack size
     43
     44	      =FC00		     STACK_TOP		      EQU 0fc00h     ;0fff0h
     45	      =F000		     STACK_SEG		      EQU 0f000h
     46
     47				     ;//******************************************************************************
     48				     ;//  G E N	E R I C	   C H I P     D E F I N I T I O N S
     49				     ;//******************************************************************************
     50	      =FFFE		     PCB_RELOCATION_DEF	     EQU     (PCB_BASE_DEF + 0FEh)   ;Relocation register on the base of    +
     51				     default PCB_BASE
     52	      =FFA0		     PCB_UMCS_DEF	     EQU     (PCB_BASE_DEF + 0A0h)   ;upper memory on the base of default   +
     53				     PCB_BASE
     54	      =FF28		     PCB_IMASK_DEF	     EQU     (PCB_BASE_DEF + 028h)   ;interrupt	mask
     55	      =1000		     PCB_IN_MEMORY	     EQU     1000h   ;BIT12
     56
     57				     ;//******************************************************************************
Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 2
LOWPOW~1\LPM_C0~1.ASM



     58				     ;//  S E G	M E N T	S    D E F I N I T I O N S
     59				     ;//******************************************************************************
     60	      =	word		     _ALIGN_		     equ     <word>
     61
     62				     ;
     63				     ; Segment and group declarations.	The order of these declarations	is
     64				     ; used to control the order of segments in	the .ROM file since the
     65				     ; Paradigm	linker copies segments in the same order they
     66				     ; are encountered in the object files.
     67				     ;
     68				     ; Make sure that this startup module is specified first when linking
     69				     ; the application.
     70				     ;
     71
     72				     % _TEXT segment para public use16 'CODE'	     ;Default code
1    73	0000			      _TEXT segment para public	use16 'CODE' ;Default code
     74	0000			     _TEXT ends
     75
     76				     ; These are segment definitions for the classes ROMDATA and ENDROMDATA.  Class
     77				     ; ROMDATA never contains anything (it is filled in	by a Paradigm LOCATE DUP
     78				     ; directive).  Class ENDROMDATA is	used to	mark the end of	class ROMDATA and
     79				     ; prevent a segment alias (since class ROMDATA will have zero length).
     80				     % _RD segment para	public use16 'ROMDATA'
1    81	0000			      _RD segment para public use16 'ROMDATA'
     82				     public		     _romdata_start			     ; Mark the	start of class	    +
     83				     ROMDATA
     84	0000			     _romdata_start  label   byte
     85	0000			     _RD ends
     86
     87
     88				     % _ERD segment para public	use16 'ENDROMDATA'
1    89	0000			      _ERD segment para	public use16 'ENDROMDATA'
     90				     public		     _romdata_end			     ; Mark the	end of class ROMDATA
     91	0000			     _romdata_end    label   byte
     92	0000  10*(??)		     db				     16	dup (?)			     ; Force the next segment to a  +
     93				     new paragraph
     94	0010			     _ERD ends
     95
     96				     % _INTERRUPT_VECTOR segment _ALIGN_ public	use16 'INT_TABLE'
1    97	0000			      _INTERRUPT_VECTOR	segment	word public use16 'INT_TABLE'
     98	0000  60*(??)			     db	INTERRUPT_VECTOR_END dup (?)	     ; Size of Interrupt Vector
     99	0060				     _interrupt_vector_end label byte
    100	0060			     _INTERRUPT_VECTOR ends
    101				     DGROUP group _INTERRUPT_VECTOR
    102
    103				     % _DATA segment _ALIGN_ public use16 'DATA'	     ; Initialized data
1   104	0000			      _DATA segment word public	use16 'DATA'	     ; Initialized data
    105				     public _initialized_data_start
    106	0000			     _initialized_data_start label byte
    107	0000			     _DATA ends
    108				     DGROUP group _DATA
    109
    110				     % _BSS segment _ALIGN_ public use16 'BSS'			     ; Uninitialized data
1   111	0000			      _BSS segment word	public use16 'BSS'		     ; Uninitialized data
    112				     public _uninitialized_data_start
    113	0000			     _uninitialized_data_start label byte
    114	0000			     _BSS ends
Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 3
LOWPOW~1\LPM_C0~1.ASM



    115				     DGROUP group _BSS
    116
    117				     % _NVRAM segment _ALIGN_ public use16 'NVRAM'   ; Dummy NVRAM para	to make	linker happy
1   118	0000			      _NVRAM segment word public use16 'NVRAM'	     ; Dummy NVRAM para	to make	linker happy
    119				     ;	     dw	?
    120	0000			     _NVRAM ends
    121				     DGROUP group _NVRAM
    122
    123				     % _STACK segment _ALIGN_ stack use16 'STACK'	; Dummy	STACK para to make linker happy
1   124	0000			      _STACK segment word stack	use16 'STACK'	    ; Dummy STACK para to make linker happy
    125					 public	   _lpm_used_sdram_end
    126	0000				 _lpm_used_sdram_end label byte
    127	0000  ????			 dw    ?
    128	0002			     _STACK ends
    129				     DGROUP group _STACK
    130
    131				     extrn _Lpm_Main:far
    132
    133				     ;//******************************************************************************
    134				     ;//  C O D	E
    135				     ;//******************************************************************************
    136
    137	0000			     _TEXT segment
    138					     assume cs:_TEXT
    139					     assume ds:DGROUP		     ;00000h
    140	0000			     _main proc	far
    141					     public _main
    142
    143	0000  B8 F000			     mov    ax,	STACK_SEG
    144	0003  8E D0			     mov    ss,	ax
    145	0005  B8 0000s			     mov    ax,	DGROUP
    146	0008  BC FC00			     mov    sp,	STACK_TOP     ;	SP = SS	+ C000h	= C000h
    147	000B  8E D8			     mov    ds,	ax	      ;	DS=SS=ES=00000h	(ax=0)
    148	000D  8E C0			     mov    es,	ax	      ;	DS=SS=ES=00000h	(ax=0)
    149					     assume    ds:DGROUP, ss:STACK_SEG,	es:DGROUP
    150
    151					     ;----------------------------------------------------------------
    152					     ;Disable interrupts and force the forward direction
    153	000F  FA			     cli
    154	0010  FC			     cld
    155
    156					     ;-----------------------------------------------------------------
    157					     ;Set UMCS base address to _TEXT, 0	Wait states, and external READY	also used
    158	0011  BA FFA0			     mov dx, PCB_UMCS_DEF
    159	0014  B8 FE38			     mov ax, PCB_UMCS_0_WAIT_STATES
    160	0017  EF			     out dx, ax
    161
    162					     ;-----------------------------------------------------------------------
    163					     ; Relocate	the T186 Peripheral Register Block to new memory space 0FA00h
    164	0018  BA FFFE			     mov dx, PCB_RELOCATION_DEF
    165	001B  B8 10FA			     mov ax, HIGH PCB_BASE + PCB_IN_MEMORY
    166	001E  EF			     out dx, ax
    167
    168					     ;-----------------------------------------------------------------
    169					     ;Zero out the interrupt vector table, total 0x80 bytes
    170	001F  B8 0000			     mov     ax, 0					     ; ax = 0x0000
    171	0022  BF 0000r			     mov     di, offset	DGROUP:_INTERRUPT_VECTOR
Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 4
LOWPOW~1\LPM_C0~1.ASM



    172	0025  B9 0060r			     mov     cx, offset	DGROUP:_interrupt_vector_end
    173	0028  2B CF			     sub     cx, di					     ; cx = counter (tells REP how  +
    174				     many time to execute the instruction)
    175	002A  D1 E9			     shr     cx, 1					     ; counter (words) = counter    +
    176				     (bytes) / 2
    177	002C  F3> AB			     rep    stosw			 ; Store ax in word es:di			    +
    178				     ; Store ax	in word	es:di
    179
    180	002E  B8 0000s			     mov    ax,	_RD
    181	0031  2D 0000s			     sub    ax,	_TEXT
    182	0034  C1 E0 04			     shl    ax,	4
    183	0037  8B F0			     mov    si,	ax
    184	0039  B8 0000s			     mov    ax,	_TEXT
    185	003C  8E D8			     mov    ds,	ax
    186					     assume    ds:_TEXT
    187
    188	003E  BF 0000r			     mov    di,	offset DGROUP:_initialized_data_start
    189	0041  B9 0000r			     mov    cx,	offset DGROUP:_uninitialized_data_start
    190	0044  2B CF			     sub    cx,	di
    191	0046  D1 E9			     shr    cx,	1
    192	0048  F3> A5			     rep    movsw
    193
    194					     ;-----------------------------------------------------------------
    195					     ;Zero out the uninitialized data area (_uninitialized_data_start -	irom used sdram	end)
    196	004A  B8 0000s			     mov    ax,	DGROUP
    197	004D  8E D8			     mov    ds,	ax
    198					     assume    ds:DGROUP
    199	004F  33 C0			     xor    ax,	ax ;ax = 0x0000
    200	0051  BF 0000r			     mov    di,	offset DGROUP:_uninitialized_data_start
    201	0054  B9 0000r			     mov    cx,	offset DGROUP:_lpm_used_sdram_end
    202	0057  2B CF			     sub    cx,	di ;cx = counter (tells	REP how	many time to execute the instruction)
    203	0059  D1 E9			     shr    cx,	1 ;counter (words) = counter (bytes) / 2
    204	005B  F3> AB			     rep    stosw ;Store ax in word es:di
    205
    206	005D			     @@1:
    207	005D  EA 00000000se		     jmp _Lpm_Main
    208	0062			     _main endp
    209	0062			     _TEXT ends
    210
    211	0000			     _START segment para public	use16 'START'			     ; Restart data
    212					     assume cs:_START ;for correct long	jump and because CS actually = 0FFFFh
    213					 org 00h ;reset	vector for 20 bit mode
    214	0000  EA 00000000sr		 jmp	_main
    215
    216	0005			     _init proc
    217	0005  EA 00000000sr		     jmp _main
    218
    219	000A			     _init endp
    220	000A			     _START ends
    221
    222				     end _init	     ; Startup code entry point
Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 5
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/02/16"
??FILENAME		Text   "LPM_C0~1"
??TIME			Text   "14:37:39"
??VERSION		Number 0540
@@1			Near   _TEXT:005D		   #206
@CPU			Text   0103H			   #28
@CURSEG			Text   _START			   #73	#81  #89  #97  #104  #111  #118	 #124  #137  #211
@FILENAME		Text   LPM_C0~1
@WORDSIZE		Text   2			   #28	#73  #81  #89  #97  #104  #111	#118  #124  #137  #211
CHIP_ID			Text   STDP93xx
FLI326XX		Text   32600
FLI326XXBX		Text   32601
INTERRUPT_VECTOR_END	Number 0060			   #40	98
INTERRUPT_VECTOR_START	Number 0000			   #39
PCB_BASE		Number FA00			   #34	165
PCB_BASE_DEF		Number FF00			   #35	50  52	54
PCB_IMASK_DEF		Number FF28			   #54
PCB_IN_MEMORY		Number 1000			   #55	165
PCB_RELOCATION_DEF	Number FFFE			   #50	164
PCB_UMCS_0_WAIT_STATES	Number FE38			   #36	159
PCB_UMCS_DEF		Number FFA0			   #52	158
STACK_SEG		Number F000			   #45	143  149
STACK_SIZE		Number 0800			   #42
STACK_TOP		Number FC00			   #44	146
STDP93XX		Text   9300
_ALIGN_			Text   word			   #60
_INIT			Near   _START:0005		   #216	 222
_INITIALIZED_DATA_STAR	Byte   _DATA:0000		   105	#106  188
T		     +
(_initialized_data_sta
rt)
_INTERRUPT_VECTOR_END	Byte   _INTERRUPT_VECTOR:0060	   #99	172
_LPM_MAIN (_Lpm_Main)	Far    ----:---- Extern		   #131	 207
_LPM_USED_SDRAM_END  +	Byte   _STACK:0000		   125	#126  201
(_lpm_used_sdram_end)
_MAIN (_main)		Far    _TEXT:0000		   #140	 141  214  217
_ROMDATA_END	     +	Byte   _ERD:0000		   90  #91
(_romdata_end)
_ROMDATA_START	     +	Byte   _RD:0000			   82  #84
(_romdata_start)
_UNINITIALIZED_DATA_ST	Byte   _BSS:0000		   112	#113  189  200
ART		     +
(_uninitialized_data_s
tart)
__JTAG__		Text
__PARADIGM__		Text   700h
__SMALL__		Text
__S__			Text

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #101	 #108  #115  #121  #129	 139  145  149	149  171  172  188  189	  +
							   196	198  200  201
  _BSS			16  0000 Word	Public	BSS	   #111	 115
Paradigm C++ Assembler 5.0	  12/02/16 14:37:39	    Page 6
Symbol Table



  _DATA			16  0000 Word	Public	DATA	   #104	 108
  _INTERRUPT_VECTOR	16  0060 Word	Public	INT_TABLE  #97	101  171
  _NVRAM		16  0000 Word	Public	NVRAM	   #118	 121
  _STACK		16  0002 Word	Stack	STACK	   #124	 129
_ERD			16  0010 Para	Public		+  #89
			ENDROMDATA
_RD			16  0000 Para	Public	ROMDATA	   #81	180
_START			16  000A Para	Public	START	   #211	 212
_TEXT			16  0062 Para	Public	CODE	   #73	#137  138  181	184  186
